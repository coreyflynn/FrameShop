// Generated by CoffeeScript 1.7.1
var Path, fs;

Path = require('path');

fs = require('fs');

module.exports = function(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON("package.json"),
    coffee: {
      compile: {
        expand: true,
        flatten: true,
        src: ['coffee/*.coffee'],
        dest: 'js/',
        ext: '.js'
      }
    },
    watch: {
      options: {
        atBegin: true
      },
      coffee: {
        files: ['coffee/*', 'sass/*'],
        tasks: ["coffee", "uglify", "compass"]
      }
    },
    uglify: {
      options: {
        banner: "/*! <%= pkg.name %> <%= pkg.version %> */\n"
      },
      dist: {
        src: ['js/*', '!js/snake.js'],
        dest: 'offline.min.js'
      }
    },
    compass: {
      dist: {
        options: {
          sassDir: 'sass',
          cssDir: 'themes'
        }
      }
    }
  });
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-coffee');
  grunt.loadNpmTasks('grunt-contrib-compass');
  return grunt.registerTask('default', ['coffee', 'uglify', 'compass']);
};
// Generated by CoffeeScript 1.7.1
var ContainerClick, PCLContainerLayer, PCLImageLayer, PertAndCellContainerLayer, PertAndCellImageLayer, PertContainerLayer, PertImageLayer, SigContainerLayer, SigImageLayer, containers;

ContainerClick = function(container) {
  var ind, oneHigher, oneLower;
  ind = container.containerIndex;
  oneLower = containers[ind - 1];
  oneHigher = containers[ind + 1];
  if (container.state === 'removed') {
    container.state = 'uncovered';
    oneLower.state = 'covered';
    container.animate({
      curve: 'ease-in-out',
      time: 0.3,
      properties: {
        y: container.y - 250
      }
    });
    container.bringToFront();
    return;
  }
  if (container.state === 'peek') {
    container.state = 'uncovered';
    if (oneHigher) {
      oneHigher.state = 'removed';
      oneHigher.animate({
        curve: 'ease-in-out',
        time: 0.3,
        properties: {
          y: container.y + 350
        }
      });
      oneHigher.bringToFront();
    }
    container.animate({
      curve: 'ease-in-out',
      time: 0.3,
      properties: {
        y: container.y + 100
      }
    });
  } else {
    if (oneLower) {
      if (container.state === 'uncovered' && oneLower.state === 'covered') {
        oneLower.state = 'peek';
        return oneLower.animate({
          curve: 'ease-in-out',
          time: 0.3,
          properties: {
            y: container.y - 100
          }
        });
      } else if (container.state !== 'removed') {
        oneLower.state = 'covered';
        return oneLower.animate({
          curve: 'ease-in-out',
          time: 0.3,
          properties: {
            y: container.y
          }
        });
      }
    }
  }
};

SigContainerLayer = new Layer({
  width: 1000,
  height: 200
});

SigContainerLayer.center();

SigContainerLayer.scrollVertical = true;

SigContainerLayer.shadowY = 3;

SigContainerLayer.shadowBlur = 3;

SigContainerLayer.shadowColor = "rgba(0,0,0,0.24)";

SigContainerLayer.containerIndex = 0;

SigContainerLayer.state = 'covered';

SigContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

PertAndCellContainerLayer = SigContainerLayer.copy();

PertAndCellContainerLayer.containerIndex = 1;

PertAndCellContainerLayer.state = 'covered';

PertAndCellContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

PertContainerLayer = SigContainerLayer.copy();

PertContainerLayer.containerIndex = 2;

PertContainerLayer.state = 'covered';

PertContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

PCLContainerLayer = SigContainerLayer.copy();

PCLContainerLayer.containerIndex = 3;

PCLContainerLayer.state = 'uncovered';

PCLContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

containers = [SigContainerLayer, PertAndCellContainerLayer, PertContainerLayer, PCLContainerLayer];

SigImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_sigs.png",
  superLayer: SigContainerLayer
});

PertAndCellImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_pertsAndCells.png",
  superLayer: PertAndCellContainerLayer
});

PertImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_perts.png",
  superLayer: PertContainerLayer
});

PCLImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_PCL.png",
  superLayer: PCLContainerLayer
});


window.Resources = {"GUTCTables_perts.png":{"path":"images\/GUTCTables_perts.png","width":599.76,"height":459.84},"Untitled-1.png":{"path":"images\/Untitled-1.png","width":584.64,"height":460.8},"framer-icon.png":{"path":"images\/framer-icon.png","width":256,"height":256},"GUTCTables_PCL.png":{"path":"images\/GUTCTables_PCL.png","width":599.76,"height":459.84},"GUTCTables_pertsAndCells.png":{"path":"images\/GUTCTables_pertsAndCells.png","width":599.76,"height":459.84},"GUTCTables_sigs.png":{"path":"images\/GUTCTables_sigs.png","width":599.76,"height":459.84},"SignaturesTable.png":{"path":"images\/SignaturesTable.png","width":600.72,"height":460.8}};

// Generated by CoffeeScript 1.7.1
var ContainerClick, PCLContainerLayer, PCLImageLayer, PertAndCellContainerLayer, PertAndCellImageLayer, PertContainerLayer, PertImageLayer, SigContainerLayer, SigImageLayer, TextIndicatorLayer, containers;

SigContainerLayer = new Layer({
  width: 1000,
  height: 200
});

SigContainerLayer.center();

SigContainerLayer.scrollVertical = true;

SigContainerLayer.shadowY = 3;

SigContainerLayer.shadowBlur = 3;

SigContainerLayer.shadowColor = "rgba(0,0,0,0.24)";

SigContainerLayer.containerIndex = 0;

SigContainerLayer.state = 'covered';

SigContainerLayer.name = 'Signatures';

SigContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

PertAndCellContainerLayer = SigContainerLayer.copy();

PertAndCellContainerLayer.containerIndex = 1;

PertAndCellContainerLayer.state = 'covered';

PertAndCellContainerLayer.name = 'Perturbagens By Cell Line';

PertAndCellContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

PertContainerLayer = SigContainerLayer.copy();

PertContainerLayer.containerIndex = 2;

PertContainerLayer.state = 'covered';

PertContainerLayer.name = 'Perturbagens';

PertContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

PCLContainerLayer = SigContainerLayer.copy();

PCLContainerLayer.containerIndex = 3;

PCLContainerLayer.state = 'uncovered';

PCLContainerLayer.name = 'Pharmacological Classes';

PCLContainerLayer.on(Events.Click, function() {
  return ContainerClick(this);
});

containers = [SigContainerLayer, PertAndCellContainerLayer, PertContainerLayer, PCLContainerLayer];

SigImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_sigs.png",
  superLayer: SigContainerLayer
});

PertAndCellImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_pertsAndCells.png",
  superLayer: PertAndCellContainerLayer
});

PertImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_perts.png",
  superLayer: PertContainerLayer
});

PCLImageLayer = new Layer({
  x: 0,
  y: 0,
  width: 1000,
  height: 462,
  image: "images/GUTCTables_PCL.png",
  superLayer: PCLContainerLayer
});

TextIndicatorLayer = new Layer({
  y: 100,
  width: $(window).width()
});

TextIndicatorLayer.centerX();

TextIndicatorLayer.style = {
  "background": "none",
  "color": "black",
  "opacity": "0.54",
  "font-size": "3.272405em",
  "text-align": "center"
};

TextIndicatorLayer.html = "Pharmacological Classes";

ContainerClick = function(container) {
  var ind, oneHigher, oneLower;
  ind = container.containerIndex;
  oneLower = containers[ind - 1];
  oneHigher = containers[ind + 1];
  if (container.state === 'removed') {
    container.state = 'uncovered';
    oneLower.state = 'covered';
    container.animate({
      curve: 'ease-in-out',
      time: 0.3,
      properties: {
        y: container.y - 250,
        opacity: 1
      }
    });
    container.bringToFront();
    TextIndicatorLayer.html = container.name;
    return;
  }
  if (container.state === 'peek') {
    container.state = 'uncovered';
    if (oneHigher) {
      oneHigher.state = 'removed';
      oneHigher.animate({
        curve: 'ease-in-out',
        time: 0.3,
        properties: {
          y: container.y + 350
        }
      });
      oneHigher.bringToFront();
    }
    container.animate({
      curve: 'ease-in-out',
      time: 0.3,
      properties: {
        y: container.y + 100
      }
    });
    TextIndicatorLayer.html = container.name;
  } else {
    if (oneLower) {
      if (container.state === 'uncovered' && oneLower.state === 'covered') {
        oneLower.state = 'peek';
        return oneLower.animate({
          curve: 'ease-in-out',
          time: 0.3,
          properties: {
            y: container.y - 100
          }
        });
      } else if (container.state !== 'removed') {
        oneLower.state = 'covered';
        return oneLower.animate({
          curve: 'ease-in-out',
          time: 0.3,
          properties: {
            y: container.y
          }
        });
      }
    }
  }
};
