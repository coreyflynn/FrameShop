// Generated by CoffeeScript 1.7.1
try {
  this.liveReload = new WebSocket("ws://" + window.location.host + "/live-reload");
  this.liveReload.onmessage = function(msg) {
    if (msg.data === "reload") {
      return location.reload();
    }
  };
} catch (_error) {
  console.log("Live Reload Failed, gotta press that reload button :(");
}


window.Resources = {"icon.png":{"path":"images\/icon.png","width":151,"height":151}};

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.Pulser = (function(_super) {
  __extends(Pulser, _super);

  function Pulser(opts) {
    this.grow = __bind(this.grow, this);
    Pulser.__super__.constructor.call(this, opts);
    this.borderRadius = "50%";
    this.grow();
  }

  Pulser.prototype.grow = function() {
    var animation;
    animation = this.animate({
      properties: {
        scale: 3,
        opacity: 0
      },
      time: 1.3,
      curve: "cubic-bezier(0, 0, .4, 1)"
    });
    return animation.on(Events.AnimationEnd, (function(_this) {
      return function() {
        _this.scale = 1;
        _this.opacity = 1;
        return Utils.delay(.5, _this.grow);
      };
    })(this));
  };

  return Pulser;

})(Layer);
// Generated by CoffeeScript 1.7.1
var Bubble, Expander, container, gridSpacer, gridX, gridY, i, j, objectCenter, _i, _j;

Bubble = (function() {
  function Bubble(parent, objectCenter, size, color, isMain, offset, angle) {
    var bubble;
    this.parent = parent;
    this.objectCenter = objectCenter;
    this.size = size;
    this.color = color;
    this.isMain = isMain != null ? isMain : false;
    this.offset = offset != null ? offset : 100;
    this.angle = angle != null ? angle : null;
    bubble = new Layer({
      superLayer: this.parent,
      height: this.size,
      width: this.size,
      x: objectCenter.x - this.size / 2,
      y: objectCenter.y - this.size / 2,
      borderRadius: this.size / 2,
      backgroundColor: this.color,
      opacity: 0
    });
    if (this.isMain) {
      bubble.opacity = 1;
    }
    if (this.isMain) {
      bubble.states.animationOptions = {
        time: 0.2
      };
    } else {
      bubble.states.animationOptions = {
        curve: "spring(300, 10, 0)",
        time: 0.2
      };
    }
    if (this.isMain) {
      bubble.states.add({
        open: {
          opacity: 0.25
        }
      });
    } else {
      bubble.states.add({
        open: {
          x: objectCenter.x - (this.offset * Math.sin(this.angle)) - this.size / 2,
          y: objectCenter.y - (this.offset * Math.cos(this.angle)) - this.size / 2,
          opacity: 1
        }
      });
    }
    return bubble;
  }

  return Bubble;

})();

Expander = (function() {
  function Expander(parent, objectCenter, size, numSubBubbles) {
    var i, that, _i, _ref;
    this.parent = parent;
    this.objectCenter = objectCenter;
    this.size = size;
    this.numSubBubbles = numSubBubbles;
    this.mainBubble = new Bubble(this.parent, this.objectCenter, this.size, "blue", true);
    this.northBubble = new Bubble(this.parent, this.objectCenter, Math.random() * this.size / 2 + this.size / 5, "red", false, this.size, 0);
    this.southBubble = new Bubble(this.parent, this.objectCenter, Math.random() * this.size / 2 + this.size / 5, "red", false, this.size, 2 * Math.PI / 4);
    this.westBubble = new Bubble(this.parent, this.objectCenter, Math.random() * this.size / 2 + this.size / 5, "red", false, this.size, 2 * Math.PI / 4 * 2);
    this.eastBubble = new Bubble(this.parent, this.objectCenter, Math.random() * this.size / 2 + this.size / 5, "red", false, this.size, 2 * Math.PI / 4 * 3);
    this.angleIncrement = 2 * Math.PI / this.numSubBubbles;
    this.subBubbles = [];
    for (i = _i = 0, _ref = this.numSubBubbles; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.subBubbles.push(new Bubble(this.parent, this.objectCenter, Math.random() * this.size / 2 + this.size / 5, "red", false, this.size, this.angleIncrement * i));
    }
    this.mainBubble.bringToFront();
    that = this;
    this.mainBubble.on(Events.Click, function() {
      var subBubble, _j, _len, _ref1, _results;
      that.mainBubble.states.next();
      _ref1 = that.subBubbles;
      _results = [];
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        subBubble = _ref1[_j];
        _results.push(subBubble.states.next());
      }
      return _results;
    });
  }

  return Expander;

})();

container = new Layer({
  height: Screen.height,
  width: Screen.width,
  backgroundColor: 'rgba(0,0,0,0)'
});

container.scroll = true;

objectCenter = {
  x: Screen.width / 2,
  y: Screen.height / 2
};

gridX = 2;

gridY = 20;

gridSpacer = 200;

for (i = _i = 0; 0 <= gridX ? _i <= gridX : _i >= gridX; i = 0 <= gridX ? ++_i : --_i) {
  for (j = _j = 0; 0 <= gridY ? _j <= gridY : _j >= gridY; j = 0 <= gridY ? ++_j : --_j) {
    objectCenter = {
      x: Screen.width / 2 - gridSpacer + gridSpacer * i,
      y: Screen.height / 2 - gridSpacer + gridSpacer * j
    };
    new Expander(container, objectCenter, Math.random() * 50 + 20, Math.round(Math.random() * 7) + 2);
  }
}
