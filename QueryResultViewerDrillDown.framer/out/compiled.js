// Generated by CoffeeScript 1.7.1
try {
  this.liveReload = new WebSocket("ws://" + window.location.host + "/live-reload");
  this.liveReload.onmessage = function(msg) {
    if (msg.data === "reload") {
      return location.reload();
    }
  };
} catch (_error) {
  console.log("Live Reload Failed, gotta press that reload button :(");
}


window.Resources = {"icon.png":{"path":"images\/icon.png","width":151,"height":151}};

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.Pulser = (function(_super) {
  __extends(Pulser, _super);

  function Pulser(opts) {
    this.grow = __bind(this.grow, this);
    Pulser.__super__.constructor.call(this, opts);
    this.borderRadius = "50%";
    this.grow();
  }

  Pulser.prototype.grow = function() {
    var animation;
    animation = this.animate({
      properties: {
        scale: 3,
        opacity: 0
      },
      time: 1.3,
      curve: "cubic-bezier(0, 0, .4, 1)"
    });
    return animation.on(Events.AnimationEnd, (function(_this) {
      return function() {
        _this.scale = 1;
        _this.opacity = 1;
        return Utils.delay(.5, _this.grow);
      };
    })(this));
  };

  return Pulser;

})(Layer);
// Generated by CoffeeScript 1.7.1
var CellFactory, SecondCellFactory, SubCellFactory, TopLevelCellFactory, tableContainer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

tableContainer = new Layer({
  y: 100,
  width: Screen.width / 2,
  height: 500
});

tableContainer.scroll = true;

tableContainer.centerX();

CellFactory = (function() {
  function CellFactory(superLayer) {
    this.superLayer = superLayer;
    this.cells = [];
    this.offset = 0;
    this.pushOffset = 153;
    this.updateOffsets = function() {
      this.offset += 51;
      return this.pushOffset += 51;
    };
    this.addStates = function(cell) {
      return cell.states.add({
        active: {
          y: this.offset
        },
        pushedDown: {
          y: this.pushOffset
        }
      });
    };
    this.buildCells = function(N, color) {
      var cell, cells, numCells, _results;
      numCells = N;
      _results = [];
      while (numCells -= 1) {
        cell = new Layer({
          superLayer: this.superLayer,
          y: this.offset,
          width: Screen.width / 2,
          height: 50
        });
        cell.name = this.cells.length;
        cell.clip = false;
        cell.backgroundColor = color;
        cell.shadowColor = 'rgba(0,0,0,0.2)';
        cell.shadowY = 1.5;
        cell.shadowBlur = 1.5;
        cell.style.border = '1px solid #F9F9F9';
        this.addStates(cell);
        cell.states.animationOptions = {
          curve: "spring-dho(100, 10, 0)"
        };
        cells = this.cells;
        cell.on(Events.Click, function(event, layer) {
          var active, c, pushStart, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results1;
          pushStart = layer.name + 1;
          active = layer.states.current === 'active';
          for (_i = 0, _len = cells.length; _i < _len; _i++) {
            c = cells[_i];
            c.states["switch"]('default');
          }
          if (!active) {
            layer.states["switch"]('active');
          }
          if (active) {
            layer.states["switch"]('default');
          }
          if (!active) {
            _ref = cells.slice(pushStart);
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              c = _ref[_j];
              c.states["switch"]('pushedDown');
            }
          }
          _ref1 = layer.subLayers;
          _results1 = [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            c = _ref1[_k];
            _results1.push(c.states["switch"]('pushedDown'));
          }
          return _results1;
        });
        this.cells.push(cell);
        _results.push(this.updateOffsets());
      }
      return _results;
    };
  }

  return CellFactory;

})();

SubCellFactory = (function(_super) {
  __extends(SubCellFactory, _super);

  function SubCellFactory() {
    return SubCellFactory.__super__.constructor.apply(this, arguments);
  }

  SubCellFactory.pushOffset2 = 51;

  SubCellFactory.updateOffsets = function() {
    return this.pushOffset2 += 51;
  };

  SubCellFactory.addStates = function(cell) {
    console.log('subcell');
    return cell.states.add({
      active: {
        y: this.offset
      },
      pushedDown: {
        y: 0
      }
    });
  };

  return SubCellFactory;

})(CellFactory);

TopLevelCellFactory = new CellFactory(tableContainer);

TopLevelCellFactory.buildCells(100, 'white');

SecondCellFactory = new SubCellFactory(TopLevelCellFactory.cells[0]);

SecondCellFactory.buildCells(4, 'red');
