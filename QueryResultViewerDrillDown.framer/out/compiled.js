// Generated by CoffeeScript 1.7.1
try {
  this.liveReload = new WebSocket("ws://" + window.location.host + "/live-reload");
  this.liveReload.onmessage = function(msg) {
    if (msg.data === "reload") {
      return location.reload();
    }
  };
} catch (_error) {
  console.log("Live Reload Failed, gotta press that reload button :(");
}


window.Resources = {"icon.png":{"path":"images\/icon.png","width":151,"height":151}};

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.Pulser = (function(_super) {
  __extends(Pulser, _super);

  function Pulser(opts) {
    this.grow = __bind(this.grow, this);
    Pulser.__super__.constructor.call(this, opts);
    this.borderRadius = "50%";
    this.grow();
  }

  Pulser.prototype.grow = function() {
    var animation;
    animation = this.animate({
      properties: {
        scale: 3,
        opacity: 0
      },
      time: 1.3,
      curve: "cubic-bezier(0, 0, .4, 1)"
    });
    return animation.on(Events.AnimationEnd, (function(_this) {
      return function() {
        _this.scale = 1;
        _this.opacity = 1;
        return Utils.delay(.5, _this.grow);
      };
    })(this));
  };

  return Pulser;

})(Layer);
// Generated by CoffeeScript 1.7.1
var Cell, CellFactory, SecondCellFactory, SubCellFactory, TopLevelCellFactory, cell, tableContainer, _i, _len, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

tableContainer = new Layer({
  y: 100,
  width: Screen.width / 2,
  height: 500
});

tableContainer.scroll = true;

tableContainer.centerX();

Cell = (function() {
  function Cell(superLayer, offset, name, color, parentCell) {
    var cell;
    this.superLayer = superLayer;
    this.offset = offset;
    this.name = name;
    this.color = color;
    this.parentCell = parentCell;
    cell = new Layer({
      superLayer: this.superLayer,
      y: this.offset,
      width: Screen.width / 2,
      height: 50
    });
    cell.name = this.name;
    cell.clip = false;
    cell.sendToBack();
    cell.backgroundColor = color;
    cell.shadowColor = 'rgba(0,0,0,0.2)';
    cell.shadowY = 1.5;
    cell.shadowBlur = 1.5;
    cell.style.border = '1px solid #F9F9F9';
    cell.subCells = [];
    cell.parentCell = null;
    cell.updateStates = function(update) {
      return cell.states.add({
        hidden: {
          y: cell.states._states.hidden.y + update
        },
        "default": {
          y: cell.states._states["default"].y + update
        },
        active: {
          y: cell.states._states.active.y + update
        },
        pushedDown: {
          y: cell.states._states.pushedDown.y + update
        }
      });
    };
    return cell;
  }

  return Cell;

})();

CellFactory = (function() {
  function CellFactory(superLayer) {
    this.superLayer = superLayer;
    this.cells = [];
    this.offset = 0;
    this.pushOffset = 153;
  }

  CellFactory.prototype.updateOffsets = function() {
    this.offset += 51;
    return this.pushOffset += 51;
  };

  CellFactory.prototype.addStates = function(cell) {
    return cell.states.add({
      active: {
        y: this.offset
      },
      pushedDown: {
        y: this.pushOffset
      }
    });
  };

  CellFactory.prototype.buildCells = function(N, color) {
    var cell, cells, numCells, _results;
    numCells = N + 1;
    _results = [];
    while (numCells -= 1) {
      cell = new Cell(this.superLayer, this.offset, this.cells.length, color);
      this.addStates(cell);
      cell.states.animationOptions = {
        curve: "spring-dho(100, 10, 0)"
      };
      cells = this.cells;
      cell.on(Events.Click, function(event, layer) {
        var active, c, pushStart, subCell, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _results1;
        pushStart = layer.name + 1;
        active = layer.states.current === 'active';
        for (_i = 0, _len = cells.length; _i < _len; _i++) {
          c = cells[_i];
          c.states["switch"]('default');
        }
        if (!active) {
          layer.states["switch"]('active');
        }
        if (active) {
          layer.states["switch"]('default');
        }
        if (!active) {
          _ref = cells.slice(pushStart);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            c = _ref[_j];
            c.states["switch"]('pushedDown');
          }
        }
        if (!active) {
          _ref1 = cells.slice(pushStart);
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            c = _ref1[_k];
            _ref2 = c.subCells;
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              subCell = _ref2[_l];
              subCell.updateStates(153);
            }
          }
        }
        for (_m = 0, _len4 = cells.length; _m < _len4; _m++) {
          c = cells[_m];
          _ref3 = c.subCells;
          for (_n = 0, _len5 = _ref3.length; _n < _len5; _n++) {
            subCell = _ref3[_n];
            subCell.states["switch"]('hidden');
          }
        }
        if (!active) {
          _ref4 = layer.subCells;
          _results1 = [];
          for (_o = 0, _len6 = _ref4.length; _o < _len6; _o++) {
            subCell = _ref4[_o];
            _results1.push(subCell.states["switch"]('default'));
          }
          return _results1;
        }
      });
      this.cells.push(cell);
      _results.push(this.updateOffsets());
    }
    return _results;
  };

  return CellFactory;

})();

SubCellFactory = (function(_super) {
  __extends(SubCellFactory, _super);

  function SubCellFactory(superLayer, parentCell) {
    this.superLayer = superLayer;
    this.parentCell = parentCell;
    this.cells = [];
    this.offset = this.parentCell.y;
    this.pushOffset = this.offset + 51;
  }

  SubCellFactory.prototype.updateOffsets = function() {
    this.pushOffset += 51;
    return this.offset += 0;
  };

  SubCellFactory.prototype.addStates = function(cell) {
    return cell.states.add({
      hidden: {
        y: this.offset
      },
      "default": {
        y: this.pushOffset
      },
      active: {
        y: this.pushOffset
      },
      pushedDown: {
        y: this.pushOffset + 153
      }
    });
  };

  SubCellFactory.prototype.buildCells = function(N, color) {
    SubCellFactory.__super__.buildCells.call(this, N, color);
    return this.parentCell.subCells = this.cells;
  };

  return SubCellFactory;

})(CellFactory);

TopLevelCellFactory = new CellFactory(tableContainer);

TopLevelCellFactory.buildCells(100, 'white');

_ref = TopLevelCellFactory.cells;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  cell = _ref[_i];
  SecondCellFactory = new SubCellFactory(tableContainer, cell);
  SecondCellFactory.buildCells(3, 'rgba(200,200,200,1)');
}
